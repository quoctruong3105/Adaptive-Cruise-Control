;/*---------------------------------------Full stack develope this project: Nguyen Quoc Truong---------------------------------------*/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;
;#define CRUISE_BTN PIND.2
;#define ADAPTIVE_BTN PIND.2
;#define RES_BTN PINC.2
;#define CANCEL_BTN PINC.3
;#define SET_BTN PINC.4
;#define GAS_PEDAL PINC.0
;#define BRAKE_PEDAL PINC.1
;#define ECHO_PORT PORTB.0
;#define TRIGGER_PORT PORTB.1
;#define ON 0
;
;char mode = 'n'; // There are 3 modes: a <-> adaptive cruise control, c <-> cruise control, n <-> normal
;char status = 'i'; // Status of mode cruise control or adaptive cruise control, it can be i<->initial, w <-> waiting and s <-> set
;unsigned int dem = 0, gapLevel = 0;
;unsigned int speed, speedTemp;
;float distance;
;int timerOverFlow = 0;
;
;
;void wheelAndThrottleControl();
;void brakeLightControl();
;void showLCD(unsigned int);
;void activeRadar();
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0021 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0022     timerOverFlow++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0023 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;interrupt [PC_INT1] void pin_change_isr1(void)
; 0000 0026 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0027     if(SET_BTN == ON && status == 'i' && speed >= 45)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0028     {
; 0000 0029         status = 's';
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002A         wheelAndThrottleControl();
;PCODE: $00000027 VOL: 0
; 0000 002B         brakeLightControl();
;PCODE: $00000028 VOL: 0
; 0000 002C         showLCD(speed);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002D         delay_ms(200);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002E     }
; 0000 002F     else if(RES_BTN == ON && status == 'w' && mode == 'c')
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0030     {
; 0000 0031         status = 's';
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0032         while(speed != speedTemp)
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0033         {
; 0000 0034             if(speed > speedTemp)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0035             {
; 0000 0036                 speed--;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0037                 delay_ms(500);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0038                 wheelAndThrottleControl();
;PCODE: $0000004D VOL: 0
; 0000 0039                 brakeLightControl();
;PCODE: $0000004E VOL: 0
; 0000 003A                 showLCD(speed);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003B                 if(CANCEL_BTN == ON || BRAKE_PEDAL == ON)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003C                 {
; 0000 003D                     status = 'w';
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003E                     break;
;PCODE: $0000005D VOL: 0
; 0000 003F                 }
; 0000 0040             }
;PCODE: $0000005E VOL: 0
; 0000 0041             else
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0042             {
; 0000 0043                 speed++;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0044                 delay_ms(500);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0045                 wheelAndThrottleControl();
;PCODE: $00000067 VOL: 0
; 0000 0046                 brakeLightControl();
;PCODE: $00000068 VOL: 0
; 0000 0047                 showLCD(speed);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0048                 if(CANCEL_BTN == ON || BRAKE_PEDAL == ON)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0049                 {
; 0000 004A                     status = 'w';
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 004B                     break;
;PCODE: $00000077 VOL: 0
; 0000 004C                 }
; 0000 004D             }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 004E         }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004F     }
; 0000 0050     else if(RES_BTN == ON && status == 'w' && mode == 'a')
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0051     {
; 0000 0052         status = 's';
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0053     }
; 0000 0054 }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;
;// Active cruise control mode
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0058 {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0059      if(dem == 0)
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 005A      {
; 0000 005B           mode = 'c';
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 005C      }
; 0000 005D      else
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 005E      {
; 0000 005F           mode = 'n';
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0060           status = 'i';
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0061      }
;PCODE: $000000A0 VOL: 0
; 0000 0062      dem++;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0063      if(dem == 2)
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0064      {
; 0000 0065           dem = 0;
;PCODE: $000000A7 VOL: 0
; 0000 0066      }
; 0000 0067 }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;
;// Active adaptive cruise control mode
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 006B {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 006C     if(mode == 'c')
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 006D     {
; 0000 006E         mode = 'a';
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 006F     }
; 0000 0070     gapLevel++;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0071     if(gapLevel == 4)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0072     {
; 0000 0073         gapLevel = 0;
;PCODE: $000000BA VOL: 0
; 0000 0074         mode = 'c';
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0075     }
; 0000 0076 }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;void activeRadar()
; 0000 0079 {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 007A     unsigned int duration;
; 0000 007B     // Trigger generate pulse
; 0000 007C     TRIGGER_PORT = 1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;	duration -> R16,R17
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 007D     delay_us(10);
;PCODE: $000000C7 VOL: 0
; 0000 007E     TRIGGER_PORT = 0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 007F     // Delete timer1
; 0000 0080     TCNT1H = 0;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0081     TCNT1L = 0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0082     TCCR1B=0b01000001; // Catch rising edge mode
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0083     TIFR1 = 0b00100001; // Delete input capture and overflow flag
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0084 
; 0000 0085     // Compute pulse width
; 0000 0086     while(TIFR1 & (1 << ICF1) == 0); // Waiting rising edge
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0087     // Delete timer1
; 0000 0088     TCNT1H = 0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0089     TCNT1L = 0;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 008A     TCCR1B=0b00000001; // Catch falling edge mode
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 008B     TIFR1 = 0b00100001; // Delete input capture and overflow flag
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 008C     timerOverFlow = 0; // Delete timer1 value
;PCODE: $000000E0 VOL: 0
; 0000 008D 
; 0000 008E     while(TIFR1 & (1 << ICF1) == 0); // Waiting falling edge
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 008F     duration = (ICR1L + ICR1H*256) + (65535 * timerOverFlow);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0090     distance = 1.0f*duration/466.47;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0091 }
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;
;void showLCD(unsigned int speed)
; 0000 0094 {
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0095     char buffer[16], buffer1[16];
; 0000 0096     lcd_clear();
;PCODE: $00000100 VOL: 0
;	speed -> Y+32
;	buffer -> Y+16
;	buffer1 -> Y+0
;PCODE: $00000101 VOL: 0
; 0000 0097     sprintf(buffer, "SPD: %d km/h", speed);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0098     lcd_gotoxy(0,0);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0099     lcd_puts(buffer);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 009A 
; 0000 009B     if(mode == 'a')
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 009C     {
; 0000 009D         lcd_gotoxy(0,1);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 009E         lcd_puts("MODE: ACC");
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 009F         lcd_gotoxy(0,2);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00A0         lcd_puts("GAP: ");
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00A1         if(gapLevel == 1)
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00A2         {
; 0000 00A3             lcd_putchar('|');
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00A4         }
; 0000 00A5         else if(gapLevel == 2)
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00A6         {
; 0000 00A7             lcd_puts("||");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00A8         }
; 0000 00A9         else if(gapLevel == 3)
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00AA         {
; 0000 00AB             lcd_puts("|||");
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00AC         }
; 0000 00AD         lcd_gotoxy(0,3);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00AE         sprintf(buffer1, "DIS: %0.2f m", distance);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00AF         lcd_puts(buffer1);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00B0     }
; 0000 00B1     else if(mode == 'c')
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00B2     {
; 0000 00B3         lcd_gotoxy(0,1);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00B4         lcd_puts("MODE: CC");
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00B5         lcd_gotoxy(0,2);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00B6         if(status == 'i')
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00B7         {
; 0000 00B8             lcd_puts("SET TO ACTIVE");
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00B9         }
; 0000 00BA         else if(status == 'w')
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00BB         {
; 0000 00BC             lcd_puts("STATUS: PAUSE");
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00BD         }
; 0000 00BE         else
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00BF         {
; 0000 00C0             lcd_puts("STATUS: ACTIVE");
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00C1         }
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00C2     }
; 0000 00C3     else
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00C4     {
; 0000 00C5         lcd_gotoxy(0,1);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00C6         lcd_puts("MODE: NORMAL");
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00C7     }
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00C8 }
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0

	.DSEG
_0x29:
	.BYTE 0x58
;
;void normalMode()
; 0000 00CB {

	.CSEG
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00CC     if(GAS_PEDAL == ON && speed < 200)
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00CD     {
; 0000 00CE         if(speed < 30)
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00CF         {
; 0000 00D0             speed+=2;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00D1         }
; 0000 00D2         else
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00D3         {
; 0000 00D4             speed++;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00D5         }
;PCODE: $000001AC VOL: 0
; 0000 00D6     }
; 0000 00D7     else if(BRAKE_PEDAL == ON && speed > 0)
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00D8     {
; 0000 00D9         if(speed > 120)
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00DA         {
; 0000 00DB             speed-=20;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00DC         }
; 0000 00DD         else if(speed > 80 && speed < 120)
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00DE         {
; 0000 00DF             speed-=10;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00E0         }
; 0000 00E1         else if(speed > 20 && speed < 80)
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00E2         {
; 0000 00E3             speed-=5;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00E4         }
; 0000 00E5         else
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00E6         {
; 0000 00E7             speed--;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00E8         }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00E9     }
; 0000 00EA     else
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00EB     {
; 0000 00EC         if(speed > 0)
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00ED         {
; 0000 00EE             speed--;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00EF             delay_ms(1000);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00F0         }
; 0000 00F1     }
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00F2     showLCD(speed);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 00F3     wheelAndThrottleControl();
;PCODE: $000001F4 VOL: 0
; 0000 00F4     brakeLightControl();
;PCODE: $000001F5 VOL: 0
; 0000 00F5     delay_ms(200);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00F6 }
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;
;void cruiseControlMode()
; 0000 00F9 {
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00FA     // This mode initially operate same as normal mode
; 0000 00FB     if(status == 'i')
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 00FC     {
; 0000 00FD         normalMode();
;PCODE: $00000200 VOL: 0
; 0000 00FE     }
; 0000 00FF     // When set button is pressed speed is locked, +/-/cancel buttons are actived
; 0000 0100     if(status == 's')
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0101     {
; 0000 0102         int i;
; 0000 0103         if(RES_BTN == ON)
;PCODE: $00000205 VOL: 0
;	i -> Y+0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0104         {
; 0000 0105             if((200 - speed) >= 5)
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0106             {
; 0000 0107                 for(i = 0; i < 5; i++)
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0108                 {
; 0000 0109                     speed++;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 010A                     delay_ms(400);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 010B                     wheelAndThrottleControl();
;PCODE: $0000021D VOL: 0
; 0000 010C                     brakeLightControl();
;PCODE: $0000021E VOL: 0
; 0000 010D                     showLCD(speed);
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 010E                 }
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 010F             }
; 0000 0110             else
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0111             {
; 0000 0112                 while(speed < 200)
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0113                 {
; 0000 0114                     speed++;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0115                     delay_ms(400);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0116                     wheelAndThrottleControl();
;PCODE: $00000233 VOL: 0
; 0000 0117                     brakeLightControl();
;PCODE: $00000234 VOL: 0
; 0000 0118                     showLCD(speed);
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0119                 }
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 011A             }
;PCODE: $00000239 VOL: 0
; 0000 011B         }
; 0000 011C         else if(SET_BTN == ON)
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 011D         {
; 0000 011E             if((speed - 5) >= 45)
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 011F             {
; 0000 0120                 for(i = 0; i < 5; i++)
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0121                 {
; 0000 0122                     speed--;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0123                     delay_ms(600);
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0124                     wheelAndThrottleControl();
;PCODE: $00000253 VOL: 0
; 0000 0125                     brakeLightControl();
;PCODE: $00000254 VOL: 0
; 0000 0126                     showLCD(speed);
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0127                 }
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0128             }
; 0000 0129             else
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 012A             {
; 0000 012B                 while(speed > 45)
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 012C                 {
; 0000 012D                     speed--;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 012E                     delay_ms(600);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 012F                     wheelAndThrottleControl();
;PCODE: $00000269 VOL: 0
; 0000 0130                     brakeLightControl();
;PCODE: $0000026A VOL: 0
; 0000 0131                     showLCD(speed);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0132                 }
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0133             }
;PCODE: $0000026F VOL: 0
; 0000 0134         }
; 0000 0135         else if(CANCEL_BTN == ON || BRAKE_PEDAL == ON)
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0136         {
; 0000 0137             status = 'w';
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 0138         }
; 0000 0139         else
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 013A         {
; 0000 013B             wheelAndThrottleControl();
;PCODE: $00000280 VOL: 0
; 0000 013C             brakeLightControl();
;PCODE: $00000281 VOL: 0
; 0000 013D             showLCD(speed);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 013E             delay_ms(200);
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 013F         }
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 0140     }
;PCODE: $0000028A VOL: 0
; 0000 0141     // The mode will be paused and operated as normal mode when cancel button or brake pedal is pressed
; 0000 0142     if(status == 'w')
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 0143     {
; 0000 0144         normalMode();
;PCODE: $0000028F VOL: 0
; 0000 0145     }
; 0000 0146 }
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;
;void wheelAndThrottleControl()
; 0000 0149 {
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 014A     if(speed == 0)
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 014B     {
; 0000 014C         DDRD.5 = 0;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 014D         DDRD.6 = 0;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 014E     }
; 0000 014F     else
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 0150     {
; 0000 0151         DDRD.5 = 1;
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 0152         DDRD.6 = 1;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 0153         OCR0B = speed*4*60/200; // Speed of wheel
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0154         OCR0A = 32*(0.005*speed + 0.5) - 1; // Angle position of throttle
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 0155     }
;PCODE: $000002B7 VOL: 0
; 0000 0156 }
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;
;void brakeLightControl()
; 0000 0159 {
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 015A     if(BRAKE_PEDAL == ON)
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 015B     {
; 0000 015C         PORTB.2 = 1;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 015D     }
; 0000 015E     else
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 015F     {
; 0000 0160         PORTB.2 = 0;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 0161     }
;PCODE: $000002C5 VOL: 0
; 0000 0162 }
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;
;int getGap(unsigned int gapLevel)
; 0000 0165 {
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0166     if(gapLevel == 1)
;	gapLevel -> Y+0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0167     {
; 0000 0168         return 30;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0169     }
; 0000 016A     else if(gapLevel == 2)
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 016B     {
; 0000 016C         return 50;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 016D     }
; 0000 016E     else
;PCODE: $000002D7 VOL: 0
; 0000 016F     {
; 0000 0170         return 70;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 0171     }
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 0172 }
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;
;void keepGap()
; 0000 0175 {
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0176     if(status == 's' || status == 'i')
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0177     {
; 0000 0178         if((distance < (getGap(gapLevel) - 6)) && speed > 0)
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0179         {
; 0000 017A             speed--;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 017B         }
; 0000 017C         else if((distance > getGap(gapLevel) + 6) && speed < 200)
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 017D         {
; 0000 017E             speed++;
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 017F         }
; 0000 0180         if(CANCEL_BTN == ON || BRAKE_PEDAL == ON)
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 0181         {
; 0000 0182             status = 'w';
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 0183             speedTemp = speed;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0184         }
; 0000 0185         wheelAndThrottleControl();
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0186         brakeLightControl();
;PCODE: $0000031F VOL: 0
; 0000 0187         showLCD(speed);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 0188         delay_ms(500);
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 0189     }
; 0000 018A     if(status == 'w')
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 018B     {
; 0000 018C         normalMode();
;PCODE: $00000329 VOL: 0
; 0000 018D     }
; 0000 018E }
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;
;void main(void)
; 0000 0191 {
;PCODE: $0000032D VOL: 0
; 0000 0192 
; 0000 0193 // Crystal Oscillator division factor: 1
; 0000 0194 #pragma optsize-
; 0000 0195 CLKPR=0x80;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 0196 CLKPR=0x00;
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0197 #ifdef _OPTIMIZE_SIZE_
; 0000 0198 #pragma optsize+
; 0000 0199 #endif
; 0000 019A 
; 0000 019B // Timer/Counter 0 initialization
; 0000 019C TCCR0A=0b10100011;
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 019D TCCR0B=0b00000100;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 019E 
; 0000 019F // Timer/Counter 1 initialization
; 0000 01A0 TCCR1A=0x00; // Normal mode
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 01A1 TIMSK1=0b00000001; // Allow interrupt when timer1 overflow
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01A2 
; 0000 01A3 // Timer/Counter 2 initialization
; 0000 01A4 TCCR2B=0b00000101;
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 01A5 
; 0000 01A6 // External Interrupt(s) initialization
; 0000 01A7 EICRA=0x0A;
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 01A8 EIMSK=0x03;
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 01A9 EIFR=0x03;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 01AA PCICR=0x02;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 01AB PCMSK1=0x1F;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 01AC PCIFR=0x02;
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 01AD 
; 0000 01AE // Alphanumeric LCD initialization
; 0000 01AF lcd_init(16);
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 01B0 
; 0000 01B1 // Set up for all Button
; 0000 01B2 PORTC = 0xff;
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 01B3 PORTD.2 = 1;
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 01B4 PORTD.3 = 1;
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 01B5 
; 0000 01B6 // Set up for ultrasonic sensor
; 0000 01B7 DDRB.0 = 0;
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 01B8 DDRB.1 = 1;
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 01B9 
; 0000 01BA // Set up for brake light
; 0000 01BB DDRB.2 = 1;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 01BC PORTB.2 = 0;
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 01BD 
; 0000 01BE // Global enable interrupts
; 0000 01BF #asm("sei")
;PCODE: $00000359 VOL: 0
	sei
;PCODE: $0000035A VOL: 0
; 0000 01C0 
; 0000 01C1 while (1)
;PCODE: $0000035B VOL: 0
; 0000 01C2       {
; 0000 01C3         // Cruise control mode
; 0000 01C4         if(mode == 'c')
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 01C5         {
; 0000 01C6             cruiseControlMode();
;PCODE: $0000035F VOL: 0
; 0000 01C7         }
; 0000 01C8         // Adaptive cruise control mode
; 0000 01C9         if(mode == 'a')
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 01CA         {
; 0000 01CB             activeRadar();
;PCODE: $00000364 VOL: 0
; 0000 01CC             if(distance > 100)
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 01CD             {
; 0000 01CE                 cruiseControlMode();
;PCODE: $00000369 VOL: 0
; 0000 01CF             }
; 0000 01D0             else
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 01D1             {
; 0000 01D2                 keepGap();
;PCODE: $0000036C VOL: 0
; 0000 01D3             }
;PCODE: $0000036D VOL: 0
; 0000 01D4         }
; 0000 01D5         // Normal mode
; 0000 01D6         if(mode == 'n')
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 01D7         {
; 0000 01D8             normalMode();
;PCODE: $00000372 VOL: 0
; 0000 01D9         }
; 0000 01DA       }
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 01DB }
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
