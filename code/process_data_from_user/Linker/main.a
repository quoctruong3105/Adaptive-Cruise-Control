;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define BTN_DDR DDRC
;#define BTN_PORT PORTC
;#define SET_PORT PORTC.0
;#define RES_PORT PORTC.1
;#define CANCEL_PORT PORTC.2
;#define CC_PORT PORTC.3
;#define ACC_PORT PORTC.4
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;unsigned char data;
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A char status,data;
; 0000 002B status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002C data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002E    {
; 0000 002F    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0030 #if RX_BUFFER_SIZE0 == 256
; 0000 0031    // special case for receiver buffer size=256
; 0000 0032    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0033 #else
; 0000 0034    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0035    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0036       {
; 0000 0037       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 0038       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0039       }
; 0000 003A #endif
; 0000 003B    }
;PCODE: $00000029 VOL: 0
; 0000 003C }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0043 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0044 char data;
; 0000 0045 while (rx_counter0==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0046 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0047 #if RX_BUFFER_SIZE0 != 256
; 0000 0048 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0049 #endif
; 0000 004A #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 004B --rx_counter0;
;PCODE: $00000043 VOL: 0
; 0000 004C #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 004D return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004E }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;#include <stdio.h>
;
;void main(void)
; 0000 0054 {
;PCODE: $0000004A VOL: 0
; 0000 0055 // Crystal Oscillator division factor: 1
; 0000 0056 #pragma optsize-
; 0000 0057 CLKPR=(1<<CLKPCE);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0058 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0059 #ifdef _OPTIMIZE_SIZE_
; 0000 005A #pragma optsize+
; 0000 005B #endif
; 0000 005C 
; 0000 005D // USART initialization
; 0000 005E UCSR0A=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005F UCSR0B=0x90;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0060 UCSR0C=0x06;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0061 UBRR0H=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0062 UBRR0L=0x33;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0063 
; 0000 0064 BTN_DDR = 0xff;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0065 BTN_PORT = 0xff;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0066 
; 0000 0067 // Global enable interrupts
; 0000 0068 #asm("sei")
;PCODE: $0000005D VOL: 0
	sei
;PCODE: $0000005E VOL: 0
; 0000 0069 
; 0000 006A while (1)
;PCODE: $0000005F VOL: 0
; 0000 006B       {
; 0000 006C           UDR0 = getchar();
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 006D           data = UDR0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 006E           if(data == 'r')
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 006F           {
; 0000 0070                RES_PORT = 0;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0071           }
; 0000 0072           else if(data == 's')
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0073           {
; 0000 0074                SET_PORT = 0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0075           }
; 0000 0076           else if(data == 'p')
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0077           {
; 0000 0078                CANCEL_PORT = 0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0079           }
; 0000 007A           else if(data == 'c')
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 007B           {
; 0000 007C                CC_PORT = 0;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 007D           }
; 0000 007E           else if(data == 'a')
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 007F           {
; 0000 0080                ACC_PORT = 0;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0081           }
; 0000 0082           delay_ms(200);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0083           BTN_PORT = 0xff;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0084       }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0085 }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
